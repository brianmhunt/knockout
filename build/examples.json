{"animated":{"name":"Animated transitions","html":"<style type=\"text/css\">\n    .planet { background-color: #AAEECC; padding: 0.25em; border: 1px solid silver; margin-bottom: 0.5em; font-size: 0.75em; }\n    .planet.rock { background-color: #EECCAA; }\n    .liveExample input { margin: 0 0.3em 0 1em; }\n</style>\n\n<h2>Planets</h2>\n<p>\n    <label>\n        <input type='checkbox' data-bind='checked: displayAdvancedOptions' />\n        Display advanced options\n    </label>\n</p>\n\n<p data-bind='fadeVisible: displayAdvancedOptions'>\n    Show:\n    <label><input type='radio' name=\"type\" value='all' data-bind='checked: typeToShow' />All</label>\n    <label><input type='radio' name=\"type\" value='rock' data-bind='checked: typeToShow' />Rocky planets</label>\n    <label><input type='radio' name=\"type\" value='gasgiant' data-bind='checked: typeToShow' />Gas giants</label>\n</p>\n\n<div data-bind='template: { foreach: planetsToShow,\n                            beforeRemove: hidePlanetElement,\n                            afterAdd: showPlanetElement }'>\n    <div data-bind='attr: { \"class\": \"planet \" + type }, text: name'> </div>\n</div>\n\n<p data-bind='fadeVisible: displayAdvancedOptions'>\n    <button data-bind='click: addPlanet.bind($data, \"rock\")'>Add rocky planet</button>\n    <button data-bind='click: addPlanet.bind($data, \"gasgiant\")'>Add gas giant</button>\n</p>","javascript":"var PlanetsModel = function() {\n    this.planets = ko.observableArray([\n        { name: \"Mercury\", type: \"rock\"},\n        { name: \"Venus\", type: \"rock\"},\n        { name: \"Earth\", type: \"rock\"},\n        { name: \"Mars\", type: \"rock\"},\n        { name: \"Jupiter\", type: \"gasgiant\"},\n        { name: \"Saturn\", type: \"gasgiant\"},\n        { name: \"Uranus\", type: \"gasgiant\"},\n        { name: \"Neptune\", type: \"gasgiant\"},\n        { name: \"Pluto\", type: \"rock\"}\n    ]);\n\n    this.typeToShow = ko.observable(\"all\");\n    this.displayAdvancedOptions = ko.observable(false);\n\n    this.addPlanet = function(type) {\n        this.planets.push({\n            name: \"New planet\",\n            type: type\n        });\n    };\n\n    this.planetsToShow = ko.computed(function() {\n        // Represents a filtered list of planets\n        // i.e., only those matching the \"typeToShow\" condition\n        var desiredType = this.typeToShow();\n        if (desiredType == \"all\") return this.planets();\n        return ko.utils.arrayFilter(this.planets(), function(planet) {\n            return planet.type == desiredType;\n        });\n    }, this);\n\n    // Animation callbacks for the planets list\n    this.showPlanetElement = function(elem) { if (elem.nodeType === 1) $(elem).hide().slideDown() }\n    this.hidePlanetElement = function(elem) { if (elem.nodeType === 1) $(elem).slideUp(function() { $(elem).remove(); }) }\n};\n\n// Here's a custom Knockout binding that makes elements shown/hidden via jQuery's fadeIn()/fadeOut() methods\n// Could be stored in a separate utility library\nko.bindingHandlers.fadeVisible = {\n    init: function(element, valueAccessor) {\n        // Initially set the element to be instantly visible/hidden depending on the value\n        var value = valueAccessor();\n        $(element).toggle(ko.unwrap(value)); // Use \"unwrapObservable\" so we can handle values that may or may not be observable\n    },\n    update: function(element, valueAccessor) {\n        // Whenever the value subsequently changes, slowly fade the element in or out\n        var value = valueAccessor();\n        ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();\n    }\n};\n\nko.applyBindings(new PlanetsModel());","id":"animated"},"arraychange":{"name":"array change example","html":"<ul data-bind='foreach: changes'>\n  <li data-bind='text: $data'>\n  </li>\n</ul>","javascript":"var myArray = ko.observableArray([\"Alpha\", \"Beta\", \"Gamma\"]);\nvar changes = ko.observableArray([])\n\nmyArray.subscribe(function(changeList) {\n  changes.push(JSON.stringify(changeList))\n}, null, \"arrayChange\");\n\nmyArray.push(\"Delta\");\nmyArray.pop();\nmyArray.splice(1, 2, \"New value\");\nmyArray.reverse();\n\nko.applyBindings({changes: changes})","id":"arraychange"},"attr":{"name":"attr binding example","html":"<a data-bind=\"attr: { href: url, title: details }\">\n    Report\n</a>","javascript":"var viewModel = {\n    url: ko.observable(\"year-end.html\"),\n    details: ko.observable(\"Report including final year-end statistics\")\n};\nko.applyBindings(viewModel);","id":"attr"},"click-event":{"name":"click binding (event object)","html":"<button data-bind=\"click: myFunction\">\n    Click me\n</button>","javascript":"var viewModel = {\n    myFunction: function(data, event) {\n        if (event.shiftKey) {\n            //do something different\n            // when user has shift key down\n        } else {\n            //do normal action\n        }\n    }\n};","id":"click-event"},"click-places":{"name":"click binding (places)","html":"<ul data-bind=\"foreach: places\">\n    <li>\n        <span data-bind=\"text: $data\"></span>\n        <button data-bind=\"click: $parent.removePlace\">Remove</button>\n    </li>\n</ul>","javascript":"function MyViewModel() {\n   var self = this;\n   self.places = ko.observableArray(['London', 'Paris', 'Tokyo']);\n\n   // The current item will be passed as the first\n   // parameter, so we know which place to remove\n   self.removePlace = function(place) {\n       self.places.remove(place)\n   }\n}\nko.applyBindings(new MyViewModel());","id":"click-places"},"click":{"name":"click binding","html":"You've clicked <span data-bind=\"text: numberOfClicks\"></span> times\n<button data-bind=\"click: incrementClickCounter\">Click me</button>","javascript":"var viewModel = {\n    numberOfClicks : ko.observable(0),\n    incrementClickCounter : function() {\n        var previousCount = this.numberOfClicks();\n        this.numberOfClicks(previousCount + 1);\n    }\n};","id":"click"},"enable-binding":{"css":"example","name":"Enable Bindings","html":"<p>\n  <label>\n    <input type='checkbox' data-bind=\"checked: hasCellphone\" />\n    I have a cellphone\n  </label>\n</p>\n<p>\n    Your cellphone number:\n    <input type='text' data-bind=\"value: cellphoneNumber, enable: hasCellphone\" />\n</p>","javascript":"var viewModel = {\n    hasCellphone : ko.observable(false),\n    cellphoneNumber: \"\"\n};\nko.applyBindings(viewModel)","id":"enable-binding"},"extender-numeric":{"name":"numeric extender","html":"<style type=\"text/css\">\n   .error {  color: red; }\n   .error input { border: 1px solid red; }\n</style>\n<p><input data-bind=\"value: myNumberOne\" /> (round to whole number)</p>\n<p><input data-bind=\"value: myNumberTwo\" /> (round to two decimals)</p>","javascript":"ko.extenders.numeric = function(target, precision) {\n    //create a writeable computed observable to intercept writes to our observable\n    var result = ko.computed({\n        read: target,  //always return the original observables value\n        write: function(newValue) {\n            var current = target(),\n                roundingMultiplier = Math.pow(10, precision),\n                newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),\n                valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;\n\n            //only write if it changed\n            if (valueToWrite !== current) {\n                target(valueToWrite);\n            } else {\n                //if the rounded value is the same, but a different value was written, force a notification for the current field\n                if (newValue !== current) {\n                    target.notifySubscribers(valueToWrite);\n                }\n            }\n        }\n    }).extend({ notify: 'always' });\n\n    //initialize with current value to make sure it is rounded appropriately\n    result(target());\n\n    //return the new computed observable\n    return result;\n};\n\nfunction AppViewModel(one, two) {\n    this.myNumberOne = ko.observable(one).extend({ numeric: 0 });\n    this.myNumberTwo = ko.observable(two).extend({ numeric: 2 });\n}\n\nko.applyBindings(new AppViewModel(221.2234, 123.4525));","id":"extender-numeric"},"extender-validation":{"name":"validation extender","html":"<p data-bind=\"css: { error: firstName.hasError }\">\n    <input data-bind='value: firstName, valueUpdate: \"afterkeydown\"' />\n    <span data-bind='visible: firstName.hasError, text: firstName.validationMessage'> </span>\n</p>\n<p data-bind=\"css: { error: lastName.hasError }\">\n    <input data-bind='value: lastName, valueUpdate: \"afterkeydown\"' />\n    <span data-bind='visible: lastName.hasError, text: lastName.validationMessage'> </span>\n</p>","javascript":"ko.extenders.required = function(target, overrideMessage) {\n    //add some sub-observables to our observable\n    target.hasError = ko.observable();\n    target.validationMessage = ko.observable();\n\n    //define a function to do validation\n    function validate(newValue) {\n       target.hasError(newValue ? false : true);\n       target.validationMessage(newValue ? \"\" : overrideMessage || \"This field is required\");\n    }\n\n    //initial validation\n    validate(target());\n\n    //validate whenever the value changes\n    target.subscribe(validate);\n\n    //return the original observable\n    return target;\n};\n\nfunction AppViewModel(first, last) {\n    this.firstName = ko.observable(first).extend({ required: \"Please enter a first name\" });\n    this.lastName = ko.observable(last).extend({ required: \"\" });\n}\n\nko.applyBindings(new AppViewModel(\"Bob\",\"Smith\"));","id":"extender-validation"},"foreach-$data":{"name":"foreach binding ($data)","html":"<ul data-bind=\"foreach: months\">\n    <li>\n        The current item is: <b data-bind=\"text: $data\"></b>\n    </li>\n</ul>","javascript":"ko.applyBindings({\n    months: [ 'Jan', 'Feb', 'Mar', 'etc' ]\n});","id":"foreach-$data"},"foreach-afteradd":{"name":"foreach binding (afteradd)","html":"<ul data-bind=\"foreach: { data: myItems, afterAdd: yellowFadeIn }\">\n    <li data-bind=\"text: $data\"></li>\n</ul>\n\n<button data-bind=\"click: addItem\">Add</button>","javascript":"ko.applyBindings({\n  myItems: ko.observableArray([ 'A', 'B', 'C' ]),\n  yellowFadeIn: function(element, index, data) {\n      $(element).filter(\"li\")\n                .animate({ backgroundColor: 'yellow' }, 200)\n                .animate({ backgroundColor: 'white' }, 800);\n  },\n  addItem: function() { this.myItems.push('New item'); }\n});","id":"foreach-afteradd"},"foreach-cats":{"name":"foreach binding (categories)","html":"<ul data-bind=\"foreach: { data: categories, as: 'category' }\">\n    <li>\n        <ul data-bind=\"foreach: { data: items, as: 'item' }\">\n            <li>\n                <span data-bind=\"text: category.name\"></span>:\n                <span data-bind=\"text: item\"></span>\n            </li>\n        </ul>\n    </li>\n</ul>","javascript":"var viewModel = {\n    categories: ko.observableArray([\n        { name: 'Fruit', items: [ 'Apple', 'Orange', 'Banana' ] },\n        { name: 'Vegetables', items: [ 'Celery', 'Corn', 'Spinach' ] }\n    ])\n};","id":"foreach-cats"},"foreach-people":{"name":"foreach binding (people)","html":"<h4>People</h4>\n<ul data-bind=\"foreach: people\">\n    <li>\n        Name at position <span data-bind=\"text: $index\"> </span>:\n        <span data-bind=\"text: name\"> </span>\n        <a href=\"#\" data-bind=\"click: $parent.removePerson\">Remove</a>\n    </li>\n</ul>\n<button data-bind=\"click: addPerson\">Add</button>","javascript":"function AppViewModel() {\n    var self = this;\n\n    self.people = ko.observableArray([\n        { name: 'Bert' },\n        { name: 'Charles' },\n        { name: 'Denise' }\n    ]);\n\n    self.addPerson = function() {\n        self.people.push({ name: \"New at \" + new Date() });\n    };\n\n    self.removePerson = function() {\n        self.people.remove(this);\n    }\n}\n\nko.applyBindings(new AppViewModel());","id":"foreach-people"},"foreach-virtual":{"name":"foreach binding (virtual)","html":"<ul>\n    <li class=\"header\">Header item</li>\n    <!-- ko foreach: myItems -->\n        <li>Item <span data-bind=\"text: $data\"></span></li>\n    <!-- /ko -->\n</ul>","javascript":"ko.applyBindings({\n    myItems: [ 'A', 'B', 'C' ]\n});","id":"foreach-virtual"},"foreach":{"name":"foreach binding","html":"<table>\n    <thead>\n        <tr><th>First name</th><th>Last name</th></tr>\n    </thead>\n    <tbody data-bind=\"foreach: people\">\n        <tr>\n            <td data-bind=\"text: firstName\"></td>\n            <td data-bind=\"text: lastName\"></td>\n        </tr>\n    </tbody>\n</table>","javascript":"ko.applyBindings({\n    people: [\n        { firstName: 'Bert', lastName: 'Bertington' },\n        { firstName: 'Charles', lastName: 'Charlesforth' },\n        { firstName: 'Denise', lastName: 'Dentiste' }\n    ]\n});","id":"foreach"},"hasfocus-binding":{"name":"hasfocus binding","html":"<input data-bind=\"hasFocus: isSelected\" />\n<button data-bind=\"click: setIsSelected\">Focus programmatically</button>\n<span data-bind=\"visible: isSelected\">The textbox has focus</span>","javascript":"var viewModel = {\n    isSelected: ko.observable(false),\n    setIsSelected: function() { this.isSelected(true) }\n};","id":"hasfocus-binding"},"hasfocus-edit":{"name":"hasfocus binding (click-to-edit)","html":"<p>\n\tName:\n\t<b data-bind=\"visible: !editing(), text: name, click: edit\">&nbsp;</b>\n\t<input data-bind=\"visible: editing, value: name, hasFocus: editing\" />\n</p>\n<p><em>Click the name to edit it; click elsewhere to apply changes.</em></p>","javascript":"function PersonViewModel(name) {\n    // Data\n    this.name = ko.observable(name);\n    this.editing = ko.observable(false);\n\n    // Behaviors\n    this.edit = function() { this.editing(true) }\n}\n\nko.applyBindings(new PersonViewModel(\"Bert Bertington\"));","id":"hasfocus-edit"},"if-binding":{"name":"if binding","html":"<label>\n  <input type=\"checkbox\" data-bind=\"checked: displayMessage\" />\n  Display message\n</label>\n\n<div data-bind=\"if: displayMessage\">Here is a message. Astonishing.</div>","javascript":"ko.applyBindings({\n    displayMessage: ko.observable(false)\n});","id":"if-binding"},"intro":{"name":"Introduction","html":"Choose a ticket class\n<select data-bind='options: tickets,\n                   optionsCaption: \"Choose ...\",\n                   optionsText: \"name\",\n                   value: chosenTicket'></select>\n\n<button data-bind='enable: chosenTicket,\n                   click: resetTicket'>Clear</button>\n\n<p data-bind='with: chosenTicket'>\n  You have chosen <b data-bind='text: name'></b>\n  ($<span data-bind='text: price'></span>)\n</p>","javascript":"function TicketsViewModel() {\n  this.tickets = [\n    { name: \"Economy\", price: 199.95 },\n    { name: \"Business\", price: 449.22 },\n    { name: \"First Class\", price: 1199.99 }\n  ];\n  this.chosenTicket = ko.observable();\n  this.resetTicket = function () {\n    this.chosenTicket(null);\n  };\n}\n\nko.applyBindings(new TicketsViewModel());","id":"intro"},"rate-limit":{"name":"rate limit example","html":"<p>Type stuff here: <input data-bind='value: instantaneousValue,\n    valueUpdate: [\"input\", \"afterkeydown\"]' /></p>\n<p>Current delayed value: <b data-bind='text: delayedValue'> </b></p>\n\n<div data-bind=\"visible: loggedValues().length > 0\">\n    <h3>Stuff you have typed:</h3>\n    <ul data-bind=\"foreach: loggedValues\">\n        <li data-bind=\"text: $data\"></li>\n    </ul>\n</div>","javascript":"function AppViewModel() {\n  this.instantaneousValue = ko.observable();\n  this.delayedValue = ko.computed(this.instantaneousValue)\n      .extend({ rateLimit: { method: \"notifyWhenChangesStop\", timeout: 400 } });\n\n  // Keep a log of the throttled values\n  this.loggedValues = ko.observableArray([]);\n  this.delayedValue.subscribe(function (val) {\n      if (val !== '')\n          this.loggedValues.push(val);\n  }, this);\n}\n\nko.applyBindings(new AppViewModel());","id":"rate-limit"},"text-binding":{"name":"text binding","html":"Today's message is: <span data-bind=\"text: myMessage\"></span>","javascript":"var viewModel = {\n    myMessage: ko.observable() // Initially blank\n};\nviewModel.myMessage(\"Hello, world!\"); // Text appears","id":"text-binding"},"text-computed":{"name":"text computed","html":"The item is <span data-bind=\"text: priceRating\"></span> today.","javascript":"var viewModel = {\n    price: ko.observable(24.95)\n};\nviewModel.priceRating = ko.computed(function() {\n    return this.price() > 50 ? \"expensive\" : \"affordable\";\n}, viewModel);","id":"text-computed"},"textinput-binding":{"name":"textInput binding example","html":"<p>Login name: <input data-bind=\"textInput: userName\" /></p>\n<p>Password: <input type=\"password\" data-bind=\"textInput: userPassword\" /></p>\n\nViewModel:\n<pre data-bind=\"text: ko.toJSON($root, null, 2)\"></pre>","javascript":"ko.applyBindings({\n    userName: ko.observable(\"\"),        // Initially blank\n    userPassword: ko.observable(\"abc\")  // Prepopulate\n});","id":"textinput-binding"},"throttle-binding":{"name":"throttle binding example","html":"<p>Type stuff here: <input data-bind='value: instantaneousValue, valueUpdate: \"afterkeydown\"' /></p>\n<p>Current throttled value: <b data-bind='text: throttledValue'> </b></p>\n\n<div data-bind=\"visible: loggedValues().length > 0\">\n    <h3>Stuff you have typed:</h3>\n    <ul data-bind=\"foreach: loggedValues\">\n        <li data-bind=\"text: $data\"></li>\n    </ul>\n</div>","javascript":"function AppViewModel() {\n    this.instantaneousValue = ko.observable();\n    this.throttledValue = ko.computed(this.instantaneousValue)\n                            .extend({ throttle: 400 });\n\n    // Keep a log of the throttled values\n    this.loggedValues = ko.observableArray([]);\n    this.throttledValue.subscribe(function (val) {\n        if (val !== '')\n            this.loggedValues.push(val);\n    }, this);\n}\n\nko.applyBindings(new AppViewModel());","id":"throttle-binding"},"value-binding":{"name":"value binding example","html":"<p>Login name: <input data-bind=\"value: userName\" /></p>\n<p>Password: <input type=\"password\" data-bind=\"value: userPassword\" /></p>\n\n<p>\n  <strong data-bind='text: userName'></strong>\n  <em data-bind='text: userPassword'></em>\n</p>","javascript":"var viewModel = {\n    userName: ko.observable(\"\"),        // Initially blank\n    userPassword: ko.observable(\"abc\"), // Prepopulate\n};","id":"value-binding"}}