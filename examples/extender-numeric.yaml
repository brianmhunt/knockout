name: numeric extender
html: |-
  <style type="text/css">
     .error {  color: red; }
     .error input { border: 1px solid red; }
  </style>
  <p><input data-bind="value: myNumberOne" /> (round to whole number)</p>
  <p><input data-bind="value: myNumberTwo" /> (round to two decimals)</p>
javascript: |-
  ko.extenders.numeric = function(target, precision) {
      //create a writeable computed observable to intercept writes to our observable
      var result = ko.computed({
          read: target,  //always return the original observables value
          write: function(newValue) {
              var current = target(),
                  roundingMultiplier = Math.pow(10, precision),
                  newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),
                  valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;

              //only write if it changed
              if (valueToWrite !== current) {
                  target(valueToWrite);
              } else {
                  //if the rounded value is the same, but a different value was written, force a notification for the current field
                  if (newValue !== current) {
                      target.notifySubscribers(valueToWrite);
                  }
              }
          }
      }).extend({ notify: 'always' });

      //initialize with current value to make sure it is rounded appropriately
      result(target());

      //return the new computed observable
      return result;
  };

  function AppViewModel(one, two) {
      this.myNumberOne = ko.observable(one).extend({ numeric: 0 });
      this.myNumberTwo = ko.observable(two).extend({ numeric: 2 });
  }

  ko.applyBindings(new AppViewModel(221.2234, 123.4525));
